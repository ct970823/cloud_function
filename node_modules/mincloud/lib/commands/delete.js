'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cli = undefined;

var _utils = require('../utils');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var cli = exports.cli = (0, _utils.ensureAuth)(function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(engine, functionName) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (functionName) {
              _context.next = 2;
              break;
            }

            throw (0, _utils.usageError)('缺少必填字段 <function_name>', '', '用法：', '    ' + engine.config.get('prefix') + ' delete <function_name>');

          case 2:
            _context.next = 4;
            return engine.request({
              uri: '/oserve/v1.3/cloud-function/' + functionName + '/',
              method: 'DELETE',
              headers: {
                json: true
              }
            });

          case 4:

            if (!engine.config.get('json')) {
              console.log('删除成功');
            }

          case 5:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());