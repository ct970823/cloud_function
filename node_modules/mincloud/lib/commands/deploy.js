'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cli = undefined;

var _prettyjson = require('prettyjson');

var _prettyjson2 = _interopRequireDefault(_prettyjson);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var cli = exports.cli = (0, _utils.ensureAuth)(function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(engine, functionName) {
    var rootFolder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : './';
    var candidate, targetFile, functionCode, remark, response, createResponse;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (functionName) {
              _context.next = 2;
              break;
            }

            throw (0, _utils.usageError)('缺少必填字段 <function_name>', '', '用法：', '    ' + engine.config.get('prefix') + ' deploy <function_name> [cloud_function_root] [-m remark]');

          case 2:
            candidate = [_path2.default.resolve(rootFolder, functionName) + '.js', _path2.default.resolve(rootFolder, functionName, 'index.js')];
            targetFile = void 0;


            candidate.forEach(function (file) {
              if (_fs2.default.existsSync(file)) {
                targetFile = file;
              }
            });

            if (targetFile) {
              _context.next = 7;
              break;
            }

            throw (0, _utils.usageError)('云函数文件不存在', '', candidate.join('\n'), '', '- \u51FD\u6570\u540D\uFF1A' + functionName, '- \u51FD\u6570\u6839\u76EE\u5F55: ' + rootFolder);

          case 7:
            functionCode = _fs2.default.readFileSync(targetFile, 'utf8');

            if (functionCode) {
              _context.next = 10;
              break;
            }

            throw (0, _utils.usageError)('云函数代码不能为空');

          case 10:
            remark = engine.config.get('message');
            _context.prev = 11;
            _context.next = 14;
            return engine.request({
              uri: '/oserve/v1.3/cloud-function/' + functionName + '/',
              method: 'PATCH',
              json: {
                name: functionName,
                function_code: functionCode,
                remark: remark
              }
            });

          case 14:
            response = _context.sent;


            if (engine.config.get('json')) {
              console.log(JSON.stringify(response.body));
            } else {
              console.log(_prettyjson2.default.render(response.body));
            }
            _context.next = 28;
            break;

          case 18:
            _context.prev = 18;
            _context.t0 = _context['catch'](11);

            if (!(_context.t0.type === 'EUSAGE')) {
              _context.next = 27;
              break;
            }

            _context.next = 23;
            return engine.request({
              uri: '/oserve/v1.3/cloud-function/',
              method: 'POST',
              json: {
                name: functionName,
                function_code: functionCode,
                remark: remark
              }
            });

          case 23:
            createResponse = _context.sent;


            if (engine.config.get('json')) {
              console.log(JSON.stringify(createResponse.body));
            } else {
              console.log(_prettyjson2.default.render(createResponse.body));
            }
            _context.next = 28;
            break;

          case 27:
            throw _context.t0;

          case 28:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[11, 18]]);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());