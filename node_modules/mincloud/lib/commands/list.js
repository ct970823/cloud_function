'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cli = undefined;

var _columnify = require('columnify');

var _columnify2 = _interopRequireDefault(_columnify);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var cli = exports.cli = (0, _utils.ensureAuth)(function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(engine) {
    var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;
    var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var response, data, view;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return engine.request({
              uri: '/oserve/v1.3/cloud-function/',
              json: true,
              method: 'GET',
              qs: {
                offset: offset,
                limit: limit
              }
            });

          case 2:
            response = _context.sent;


            if (engine.config.get('json')) {
              console.log(JSON.stringify(response.body));
            } else {
              data = response.body;


              if (data.objects.length === 0) {
                console.log('没有云函数');
              } else {
                view = data.objects.map(function (item) {
                  return {
                    函数名: item.name,
                    状态: item.audit_status
                  };
                });

                console.log((0, _columnify2.default)(view));
              }
            }

            return _context.abrupt('return', response);

          case 5:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());