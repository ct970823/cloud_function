'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cli = undefined;

var cli = exports.cli = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(engine, clientId, clientSecret) {
    var authResponse, code, response;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(!clientId || !clientSecret)) {
              _context.next = 2;
              break;
            }

            throw (0, _utils.usageError)('缺少必填字段 <client_id> 和 <client_secret>', '', '用法：', '    ' + engine.config.get('prefix') + ' login <client_id> <client_secret>');

          case 2:
            _context.next = 4;
            return engine.request({
              uri: '/api/oauth2/hydrogen/openapi/authorize/',
              method: 'POST',
              json: {
                client_id: clientId,
                client_secret: clientSecret
              },
              jar: true,
              followAllRedirects: true
            });

          case 4:
            authResponse = _context.sent;
            code = authResponse.body.code;
            _context.next = 8;
            return engine.request({
              uri: '/api/oauth2/access_token/',
              method: 'POST',
              formData: {
                client_id: clientId,
                client_secret: clientSecret,
                grant_type: 'authorization_code',
                code: code
              }
            });

          case 8:
            response = _context.sent;

            if (!engine.config.get('json')) {
              _context.next = 13;
              break;
            }

            console.log(response.body);
            _context.next = 15;
            break;

          case 13:
            _context.next = 15;
            return save(engine, JSON.parse(response.body), clientId);

          case 15:
            return _context.abrupt('return', response);

          case 16:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function cli(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function save(engine, data, clientId) {
  return new Promise(function (resolve, reject) {
    var tokens = (0, _utils.decodeTokens)(engine.config.get('tokens'));
    tokens[clientId] = data.access_token;
    tokens = (0, _utils.encodeTokens)(tokens);

    // 登录成功，更新全局 tokens
    engine.config.set('tokens', tokens, 'config');

    // 如果标记 local，保存 client_id 到当前工作目录
    if (engine.config.get('local')) {
      var pwdInitFile = _path2.default.resolve('./.' + engine.config.get('prefix') + 'rc');
      _fs2.default.writeFileSync(pwdInitFile, 'client_id=' + clientId + '\n');
    } else {
      // 否则更新全局的 client_id
      engine.config.set('client_id', clientId, 'config');
    }

    engine.config.on('save', function () {
      console.log('登录成功');
      resolve();
    });

    engine.config.on('error', reject);

    engine.config.save('config', 'ini');
  });
}