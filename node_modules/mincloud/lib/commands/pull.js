'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cli = undefined;

var _utils = require('../utils');

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var mkdir = _util2.default.promisify(_mkdirp2.default);
var echo = _util2.default.promisify(_fs2.default.writeFile);

var cli = exports.cli = (0, _utils.ensureAuth)(function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(engine, functionName) {
    var rootFolder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : './';
    var response, data, target, targetfile;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (functionName) {
              _context.next = 2;
              break;
            }

            throw (0, _utils.usageError)('缺少必填字段 <function_name>', '', '用法：', '    ' + engine.config.get('prefix') + ' deploy <function_name> [cloud_function_root]');

          case 2:
            _context.next = 4;
            return engine.request({
              uri: '/oserve/v1.3/cloud-function/' + functionName + '/',
              method: 'GET',
              json: true
            });

          case 4:
            response = _context.sent;
            data = response.body;
            target = _path2.default.resolve(rootFolder, functionName);
            targetfile = _path2.default.join(target, 'index.js');
            _context.next = 10;
            return mkdir(target);

          case 10:
            _context.next = 12;
            return echo(targetfile, data.function_code);

          case 12:

            if (engine.config.get('json')) {
              console.log(JSON.stringify(data));
            } else {
              console.log('拉取代码成功');
              console.log('');
              console.log(target);
              console.log(targetfile);
              console.log('');
              console.log('- \u51FD\u6570\u540D\uFF1A' + functionName);
              console.log('- \u51FD\u6570\u6839\u76EE\u5F55: ' + rootFolder);
            }

          case 13:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());