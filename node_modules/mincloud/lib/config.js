'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaults = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = loadConfig;

var _configChain = require('config-chain');

var _configChain2 = _interopRequireDefault(_configChain);

var _nopt = require('nopt');

var _nopt2 = _interopRequireDefault(_nopt);

var _osenv = require('osenv');

var _osenv2 = _interopRequireDefault(_osenv);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 优先级
 * 1. 命令行参数
 * 2. 环境变量
 * 3. ini rc 文件
 *
 */
var defaults = exports.defaults = {
  argv: process.argv,
  env: process.env,
  prefix: _package2.default.name,
  oshome: _osenv2.default.home(),
  version: _package2.default.version,
  base_url: 'https://cloud.minapp.com/',
  ua: 'ifanr-' + _package2.default.name + '/' + _package2.default.version
};

function loadConfig() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return new Promise(function (resolve, reject) {
    opts = _extends({}, defaults, opts);
    var parsed = (0, _nopt2.default)({
      json: [Boolean],
      message: [String],
      local: [Boolean]
    }, { j: '--json', m: '--message', l: '--local' }, opts.argv, 2);
    var cmd = parsed.argv.remain.shift(); // 命令
    if (cmd) {
      parsed.cmd = cmd;
    }
    parsed.params = parsed.argv.remain; // 命令行参数

    var iniFile = _path2.default.join(opts.oshome, '.' + opts.prefix + 'rc');
    if (!_fs2.default.existsSync(iniFile)) {
      _fs2.default.writeFileSync(iniFile, '');
    }

    var config = (0, _configChain2.default)(parsed, _configChain2.default.env(opts.prefix + '_', opts.env));

    // 优先读取当前工作目录下的配置文件
    var pwdInitFile = _path2.default.resolve('./.' + opts.prefix + 'rc');
    if (_fs2.default.existsSync(pwdInitFile)) {
      config.addFile(pwdInitFile, 'ini', 'pwdconfig');
    }

    // 读取用户根目录下的配置文件
    config.addFile(iniFile, 'ini', 'config');

    config.add(defaults);

    config.on('load', function () {
      resolve(config);
    });

    config.on('error', reject);
  });
}