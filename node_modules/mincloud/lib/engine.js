'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _commands = require('./commands');

var _commands2 = _interopRequireDefault(_commands);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(opts) {
    var _this = this;

    var config, commands, defaultRequestOpts, clientId, tokens, baseUrl, engine;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (0, _config2.default)(opts);

          case 2:
            config = _context2.sent;
            _context2.next = 5;
            return (0, _commands2.default)();

          case 5:
            commands = _context2.sent;
            defaultRequestOpts = {};
            clientId = config.get('client_id');
            tokens = (0, _utils.decodeTokens)(config.get('tokens'));


            if (clientId && tokens[clientId]) {
              defaultRequestOpts['headers'] = {
                'User-Agent': config.get('ua'),
                Authorization: 'Bearer ' + tokens[clientId]
              };
            }
            baseUrl = config.get('base_url');

            if (baseUrl) {
              defaultRequestOpts['baseUrl'] = baseUrl;
            }

            engine = {
              request: (0, _utils.afterRequest)(_util2.default.promisify(_request2.default.defaults(defaultRequestOpts))),
              config: config,
              cli: Object.keys(commands).reduce(function (obj, k) {
                obj[k] = function () {
                  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                    var _commands$k;

                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }

                    var res;
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return (_commands$k = commands[k]).cli.apply(_commands$k, [engine].concat(args));

                          case 2:
                            res = _context.sent;


                            // 当前运行环境信息
                            if (clientId && !config.get('json')) {
                              console.log('');
                              console.log('- client_id: ' + clientId);
                              console.log('- ' + config.get('prefix') + ': v' + config.get('version'));
                              console.log('- node: ' + process.version);
                            }

                            return _context.abrupt('return', res);

                          case 5:
                          case 'end':
                            return _context.stop();
                        }
                      }
                    }, _callee, _this);
                  }));

                  return function () {
                    return _ref2.apply(this, arguments);
                  };
                }();
                return obj;
              }, {})
            };
            return _context2.abrupt('return', engine);

          case 14:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  function engine(_x) {
    return _ref.apply(this, arguments);
  }

  return engine;
}();