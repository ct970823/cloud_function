'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _npmlog = require('npmlog');

var _npmlog2 = _interopRequireDefault(_npmlog);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function addError(type) {
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var err = new Error(args.join('\n'));
    err.type = type;
    return err;
  };
}

var handlers = {
  EUSAGE: [function (err) {
    if (err.message) {
      err.message.split('\n').forEach(function (msg) {
        _npmlog2.default.warn('', msg);
      });
      _npmlog2.default.warn('');
    }
  }, 'usageError'],
  EAUTH: [function (err) {
    if (err.message) {
      if (err.message) {
        err.message.split('\n').forEach(function (msg) {
          _npmlog2.default.notice('', msg);
        });
        _npmlog2.default.notice('');
      }
    }
  }, 'authError']

  // exports all errors
};Object.keys(handlers).forEach(function (key) {
  exports[handlers[key][1]] = addError(key);
});

exports.errorHandler = function errorHandler(err) {
  if (!err) {
    process.exit(1);
  }

  if (handlers[err.type]) {
    handlers[err.type][0](err);
    process.exit(1);
  }

  err.message && _npmlog2.default.error(err.message);

  if (err.stack) {
    _npmlog2.default.error('', err.stack);
    _npmlog2.default.error('', '');
    _npmlog2.default.error('', '');
    _npmlog2.default.error('', _package2.default.name + ':', _package2.default.version, 'node:', process.version);
    _npmlog2.default.error('', '请复制此日志创建一个问题 ' + _package2.default.bugs.url);
    _npmlog2.default.error('');
  }
  process.exit(1);
};

exports.ensureAuth = function (cli) {
  return function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(engine) {
      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      var clientId, tokens;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              clientId = engine.config.get('client_id');
              tokens = exports.decodeTokens(engine.config.get('tokens'));

              if (!(!clientId || !tokens[clientId])) {
                _context.next = 4;
                break;
              }

              throw exports.authError('请先登录');

            case 4:
              return _context.abrupt('return', cli.apply(undefined, [engine].concat(args)));

            case 5:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, undefined);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
};

exports.afterRequest = function (request) {
  return function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var response,
          message,
          _args2 = arguments;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return request.apply(undefined, _args2);

            case 2:
              response = _context2.sent;

              if (!(response.statusCode === 401)) {
                _context2.next = 5;
                break;
              }

              throw exports.authError('登录凭证已过期，请重新登录。');

            case 5:
              if (!(response.statusCode === 403)) {
                _context2.next = 7;
                break;
              }

              throw exports.authError('权限不足。');

            case 7:
              if (!(response.statusCode === 404)) {
                _context2.next = 9;
                break;
              }

              throw exports.usageError('不存在。');

            case 9:
              if (!([200, 201, 202, 204].indexOf(response.statusCode) === -1)) {
                _context2.next = 14;
                break;
              }

              message = response.body;

              if (typeof message === 'string') {
                try {
                  message = JSON.parse(message);
                } catch (err) {
                  message = '';
                }
              }

              if ((typeof message === 'undefined' ? 'undefined' : _typeof(message)) === 'object') {
                message = JSON.stringify(message);
              }

              throw exports.usageError(response.statusCode, message);

            case 14:
              return _context2.abrupt('return', response);

            case 15:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, undefined);
    }));

    return function () {
      return _ref2.apply(this, arguments);
    };
  }();
};

exports.formatByte = function (byte) {
  var divisor = 1024;
  var unit = ['Byte', 'KB', 'MB', 'GB', 'TB'];
  var i = 0;
  while (Math.floor(byte / divisor) > 1) {
    i++;
    byte = byte / divisor;
  }
  return byte.toFixed(2) + unit[i];
};

exports.decodeTokens = function () {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  str = str.trim();
  if (str.length === 0) return {};

  return str.split(',').reduce(function (acc, pair) {
    pair = pair.split(':');
    acc[pair[0]] = pair[1];
    return acc;
  }, {});
};

exports.encodeTokens = function () {
  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return Object.keys(obj).map(function (key) {
    return key + ':' + obj[key];
  }).join(',');
};